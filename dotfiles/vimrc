" Allow multiple buffers in the same window
set hidden

" Better command-line completion
set wildmenu

" Ensure that we are in modern vim mode, not backwards-compatible vi mode
set nocompatible
set backspace=indent,eol,start
filetype off " required for Vundle plugin manager

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" vim-c0 plugin on Github repo
Plugin 'cmugpi/vim-c0'

" install gundo
Plugin 'sjl/gundo.vim'

" NERD tree
Plugin 'scrooloose/nerdtree'

" Syntastic
Plugin 'vim-syntastic/syntastic'

" Whitespace
Plugin 'ntpeters/vim-better-whitespace'

" Language-specific plugins
Plugin 'jez/vim-better-sml'
" This is not the 'official' rust.vim plugin because it doesn't support cargo
" (yet)
Plugin 'mckinnsb/rust.vim'

" Surround
Plugin 'tpope/vim-surround'

" Let's repeat things!
Plugin 'tpope/vim-repeat'

" I enjoy looking good
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'bling/vim-bufferline'

" git gutter
Plugin 'airblade/vim-gitgutter'

call vundle#end()

" Helpful information: cursor position in bottom right, line numbers on
" left
set ruler
set number

" Enable filetype detection and syntax highlighting
syntax on
filetype on
filetype indent on
filetype plugin on

set tabstop=2
set shiftwidth=2
set expandtab

hi clear SignColumn

" Indent as intelligently as vim knows how
set smartindent

" Show multicharacter commands as they are being typed
set showcmd

" Show 80 character limit line
set colorcolumn=80

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=10

" buffer stuff
map <C-Up> :bnext<CR>
map <C-Down> :bprevious<CR>
map <C-W> :bd<CR>

map <C-O> :NERDTree<CR>
let NERDTreeQuitOnOpen=1

nnoremap gV `[v`]

" ARM assembly syntax
let asmsyntax='armasm'
let filetype_inc='armasm'

" Change leader key
let mapleader=","

" gundo tree
nnoremap <F2> :GundoToggle<CR>

" make and associated convenience
nnoremap <leader>m :make<CR>
nnoremap <C-Right> :cn<CR>
nnoremap <C-Left> :cp<CR>

" Search as characters are entered
set incsearch
" Highlight matches
set hlsearch

" Save
nnoremap <leader>w :w<CR>

" Save session
nnoremap <leader>s :mksession<CR>

" Git commit/push
nnoremap <leader>r :! git commit -am "kek" && git push<CR>

" Tab things
nnoremap <Tab> >>
nnoremap <S-Tab> <<

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

augroup mySyntastic
  " Errors should go into location-list
  au FileType sml let g:syntastic_always_populate_loc_list = 1

  " automatically open/close location-list
  au Filetype sml let g:syntastic_auto_loc_list = 1
  au Filetype sml let g:syntastic_sml_no_polyeq = 1
  au Filetype sml let g:syntastic_sml_smlnj_args = "-Ccontrol.poly-eq-warn=false"

  au FileType tex let b:syntastic_mode = "passive"
augroup END

" Make the syntastic errors readable
hi Search ctermfg=88

" Toggle syntax checking
nnoremap <Leader>t :SyntasticToggleMode<CR>

" highlight QuickFixLine guibg='Purple' ctermbg=52

" Let's not leave swap files cluttering everything while just perusing with
" gvim, shall we?
if has("gui_running")
  set noswapfile
  set nobackup
  set nowritebackup
endif

" Open NERDTree when vim is opened bare
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Enable statusbar
set laststatus=2

set mouse=a

let g:airline_theme='simple'
let g:bufferline_echo=0
set noshowmode

